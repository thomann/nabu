/*
 * SignChooser.java
 *
 * Created on 27. Juli 2003, 01:43
 */

package ch.unizh.ori.tuppu.hieroglyph.input;

import ch.unizh.ori.tuppu.hieroglyph.*;
import java.util.List;
import java.awt.*;
import java.awt.event.*;
import java.awt.font.FontRenderContext;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.text.JTextComponent;
import java.io.*;
import java.util.*;

/**
 *
 * @author  pht
 */
public class SignChooser extends javax.swing.JPanel {
    
    /** Creates new form SignChooser */
    public SignChooser() {
        initComponents();
        myInitComponents();
    }
    
    private void myInitComponents(){
        signLabel = new HieroLabel();
        signLabel.setFontSize(80);
        signLabel.setBackground(Color.white);
        signRendererPane.add(signLabel, BorderLayout.CENTER);
        handleJList(findList);
        initClassnames();
        initShapes();
        selectionPane.addChangeListener(new ChangeListener(){
            public void stateChanged(ChangeEvent e){
                switch(selectionPane.getSelectedIndex()){
                    case INDEX_CLASSES: // classnames
                        ((JComponent)classesFocusers.get(classesTab.getSelectedIndex())).requestFocus();
                        break;
                        
                    case INDEX_SHAPES:  // shapes
                        ((JComponent)shapesFocusers.get(formsTab.getSelectedIndex())).requestFocus();
                        break;
                        
                    case INDEX_FIND:  // find
                        findTf.selectAll();
                        findTf.requestFocus();
                        break;
                }
            }
        });
        putActionName(this, "F2", "focusClasses");
        putActionName(this, "F3", "focusShapes");
        putActionName(this, "F4", "focusFind");
        putActionName(this, "ESCAPE", "back");
        this.getActionMap().put("focusClasses", new SignChooser.FocusTopAction(INDEX_CLASSES));
        this.getActionMap().put("focusShapes", new SignChooser.FocusTopAction(INDEX_SHAPES));
        this.getActionMap().put("focusFind", new SignChooser.FocusTopAction(INDEX_FIND));
        this.getActionMap().put("back", new AbstractAction("back"){
            public void actionPerformed(ActionEvent e){
                if(back != null){
                    back.requestFocus();
                }
            }
        });
        
        addInsertListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                System.out.println("inserting "+e.getActionCommand());
            }
        });
    }
    
    public static void putActionName(JComponent comp, String keyStroke, String actionName){
        comp.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(keyStroke), actionName);
    }
    
    public static final int INDEX_CLASSES = 0;
    public static final int INDEX_SHAPES = 1;
    public static final int INDEX_FIND = 2;
    
    private List classesFocusers;
    private List shapesFocusers;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        selectionPane = new javax.swing.JTabbedPane();
        classesTab = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        formsTab = new javax.swing.JTabbedPane();
        findTab = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        findTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        findList = new javax.swing.JList();
        signPane = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nameTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        phonTf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        codesTf = new javax.swing.JTextField();
        signRendererPane = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        selectionPane.setBorder(new javax.swing.border.TitledBorder("Select"));
        classesTab.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        selectionPane.addTab("Classes", classesTab);

        jPanel3.setLayout(new java.awt.BorderLayout());

        formsTab.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jPanel3.add(formsTab, java.awt.BorderLayout.CENTER);

        selectionPane.addTab("Forms", jPanel3);

        findTab.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Phon:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel7.add(jLabel1, gridBagConstraints);

        findTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findTfActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(findTf, gridBagConstraints);

        findTab.add(jPanel7, java.awt.BorderLayout.NORTH);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportView(findList);

        findTab.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        selectionPane.addTab("Find", findTab);

        add(selectionPane, java.awt.BorderLayout.CENTER);

        signPane.setLayout(new java.awt.BorderLayout());

        signPane.setBorder(new javax.swing.border.TitledBorder("Selected Sign"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel2, gridBagConstraints);

        nameTf.setColumns(10);
        nameTf.setEditable(false);
        nameTf.setText("V17");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(nameTf, gridBagConstraints);

        jLabel4.setText("Phon:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel4, gridBagConstraints);

        phonTf.setColumns(10);
        phonTf.setEditable(false);
        phonTf.setText("sDm");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(phonTf, gridBagConstraints);

        jLabel6.setText("Codes:");
        jLabel6.setToolTipText("null");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel6, gridBagConstraints);

        codesTf.setColumns(10);
        codesTf.setEditable(false);
        codesTf.setText("sDm, V17");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(codesTf, gridBagConstraints);

        signPane.add(jPanel2, java.awt.BorderLayout.NORTH);

        signRendererPane.setLayout(new java.awt.BorderLayout());

        signPane.add(signRendererPane, java.awt.BorderLayout.CENTER);

        add(signPane, java.awt.BorderLayout.EAST);

    }//GEN-END:initComponents

    private void findTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTfActionPerformed
        find();
    }//GEN-LAST:event_findTfActionPerformed

    private void initClassnames(){
        readClassnames();
        /*Iterator iter = m.keySet().iterator();
        while(iter.hasNext()){
            String c = (String)iter.next();
            String name = (String)m.get(c);
            JList list = new JList(HieroglyphicSigns.getDefault().getClasses(c).toArray());
            handleJList(list);
            classesTab.add(c+": "+name, new JScrollPane(list));
        }*/
    }
    
    protected void readClassnames(){
        String filename = "classnames.txt";
        //Map map = new HashMap();
        try{
            //BufferedReader in = new BufferedReader(new FileReader(filename));
            BufferedReader in = new BufferedReader(new InputStreamReader(SignChooser.class.getResourceAsStream(filename)));
            String line;
            char ch = 'A';
            int index = 0;
            List focusers = new ArrayList();
            while( (line=in.readLine()) != null ){
            	if(line.length() >= 1){
                    //map.put(String.valueOf(ch), line);
                    String c = String.valueOf(ch);
                    String mnemonic = c;
                    if(ch == 'Z'+1){
                        c = "Aa";
                        mnemonic = "J";
                    }
                    JList list = new JList(HieroglyphicSigns.getDefault().getClasses(c).toArray());
                    handleJList(list);
                    focusers.add(list);
                    classesTab.add(c+": "+line, new JScrollPane(list));
                   
                    classesTab.setMnemonicAt(index, KeyStroke.getKeyStroke(mnemonic).getKeyCode());
                    ++index;
                 }
                ch++;
            }
            //ch--;
            //map.put("Aa",map.remove(String.valueOf(ch)));
            classesTab.addChangeListener(new SignChooser.MyChangeListener(focusers));
            classesFocusers = focusers;
            in.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    private void initShapes(){
        readShapes();
        /*Iterator iter = m.keySet().iterator();
        while(iter.hasNext()){
            String name = (String)iter.next();
            List shapes = (List)m.get(name);
            JList list = new JList(shapes.toArray());
            handleJList(list);
            formsTab.add(name, new JScrollPane(list));
        }*/
    }
    
    protected void readShapes(){
        String filename = "shapes.txt";
        //Map map = new HashMap();
        try{
            BufferedReader in = new BufferedReader(new InputStreamReader(SignChooser.class.getResourceAsStream(filename)));
            String line;
            int index = 0;
            List focusers = new ArrayList();
            while( (line=in.readLine()) != null ){
            	String notneeded = in.readLine();
                String s = in.readLine();
                if(s != null){
                    String[] ss = s.split("\\s+");
                    List l = new ArrayList(ss.length);
                    for(int i=0; i<ss.length; i++){
                        Object o = HieroglyphicSigns.getDefault().getDonne(ss[i]);
                        if(o != null){
                            l.add(o);
                        }
                    }
                    JList list = new JList(l.toArray());
                    handleJList(list);
                    focusers.add(list);
                    formsTab.add(line, new JScrollPane(list));
                    String mnemonic = String.valueOf(line.charAt(0)).toUpperCase();
                    formsTab.setMnemonicAt(index, KeyStroke.getKeyStroke(mnemonic).getKeyCode());
                    ++index;
                }
            }
            formsTab.addChangeListener(new SignChooser.MyChangeListener(focusers));
            shapesFocusers = focusers;
            in.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        //return map;
    }
    
    private void handleJList(JList l){
        l.setCellRenderer(cellRenderer);
        l.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        l.addListSelectionListener(listSelectionListener);
        l.addMouseListener(mouseListener);
        l.addKeyListener(keyListener);
        /*l.addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e){
                setSelectedSign( (HieroglyphicSigns.Donne)((JList)e.getSource()).getSelectedValue() );
            }
        });*/
    }
    
//*************************************************************************
//************************  Listeners  ************************************
//*************************************************************************
    
    public static class HieroListRenderer extends HieroLabel implements ListCellRenderer{
        
        protected Border noFocusBorder;

        public HieroListRenderer() {
            super();
            noFocusBorder = new EmptyBorder(1, 1, 1, 1);
            setOpaque(true);
            setBorder(noFocusBorder);
        }
        
        public Component getListCellRendererComponent(JList list,
                                              Object value,
                                              int index,
                                              boolean isSelected,
                                              boolean cellHasFocus)
        {
            HieroglyphicSigns.Donne d = (HieroglyphicSigns.Donne)value;
            //Component c = super.getListCellRendererComponent(list, String.valueOf(d.ch), index, isSelected, cellHasFocus);
            //c.setFont(getListFontMapper().getFont(d));
            String text = (d.entry==null)?"":d.entry;
            setText(text);
            
            setComponentOrientation(list.getComponentOrientation());
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            }
            else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            setEnabled(list.isEnabled());
            setBorder((cellHasFocus) ? UIManager.getBorder("List.focusCellHighlightBorder") : noFocusBorder);
            return this;
        }
    }
    
    public class MyListSelectionListener implements ListSelectionListener{
        public void valueChanged(ListSelectionEvent e){
            setSelectedSign( (HieroglyphicSigns.Donne)((JList)e.getSource()).getSelectedValue() );
        }
    }
    private MyListSelectionListener listSelectionListener = new MyListSelectionListener();
    
    public class MyMouseListener extends MouseAdapter{
        public void mouseClicked(MouseEvent e){
            if(e.getClickCount() == 2){
                HieroglyphicSigns.Donne d = (HieroglyphicSigns.Donne)((JList)e.getSource()).getSelectedValue();
                setSelectedSign( d );
                //System.out.println("MouseDoubleClicked: " + d );
                insertDonne(d);
            }
        }
    }
    private MyMouseListener mouseListener = new MyMouseListener();
    
    public class MyKeyListener extends KeyAdapter{
        public void keyPressed(KeyEvent e){
            if(e.getKeyCode() == KeyEvent.VK_ENTER){
                HieroglyphicSigns.Donne d = (HieroglyphicSigns.Donne)((JList)e.getSource()).getSelectedValue();
                setSelectedSign( d );
                //System.out.println("Enter pressed: " + d );
                insertDonne(d);
            }
        }
    }
    private MyKeyListener keyListener = new MyKeyListener();
    
    public class MyChangeListener implements ChangeListener{
        private List focusers;
        public MyChangeListener(List focusers){
            this.focusers = focusers;
        }
        public void stateChanged(ChangeEvent e){
            JTabbedPane p = (JTabbedPane)e.getSource();
            JComponent c = (JComponent)focusers.get(p.getSelectedIndex());
            /*if(c instanceof JList){
                JList l = (JList)c;
                if(l.getSelectedIndex() < 0 && l.getModel().getSize() > 0){
                    l.setSelectedIndex(0);
                }
            }*/
            c.requestFocus();
        }
    }
    
    public class FocusTopAction extends AbstractAction{
        private int index;
        public FocusTopAction(int index){
            this.index = index;
        }
        public void actionPerformed(ActionEvent actionEvent) {
            selectionPane.setSelectedIndex(index);
            if(index == INDEX_CLASSES){
                ((JComponent)classesFocusers.get(classesTab.getSelectedIndex())).requestFocus();
            }else if(index == INDEX_SHAPES){
                ((JComponent)shapesFocusers.get(formsTab.getSelectedIndex())).requestFocus();
            }
        }
    }
    
    public class TextAction implements ActionListener{
        private JTextComponent tc;
        public TextAction(JTextComponent tc){
            this.tc = tc;
        }
        public void actionPerformed(ActionEvent actionEvent) {
            tc.replaceSelection(actionEvent.getActionCommand());
            tc.requestFocus();
        }
    }
    
//*************************************************************************
//************************  Other Methods  ********************************
//*************************************************************************
    
    private SignChooser.HieroListRenderer cellRenderer = new SignChooser.HieroListRenderer();
    protected FontMapper getListFontMapper(){
        if(listFontMapper == null){
            FontRenderContext frc = ((Graphics2D)getGraphics()).getFontRenderContext();
			listFontMapper = new FontMapper(frc, 30, false, HieroglyphicSigns.getDefault().getBase());
        }
        return listFontMapper;
    }
    
    public void find(){
        List l = HieroglyphicSigns.getDefault().getPhon(findTf.getText());
        if(l != null){
            findList.setModel(new ListListModel(l));
            findList.requestFocus();
        }
    }
    
    public void insertDonne(HieroglyphicSigns.Donne d){
        fireInsertListenerActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, getSelectedSign().entry));
    }
    
    public static class ListListModel extends AbstractListModel{
        private List list;
        public ListListModel(List list){
            this.list = list;
        }
        public int getSize() { return list.size(); }
        public Object getElementAt(int i) { return list.get(i); }
    }
    
    public void addTextField(JTextComponent tc){
        addInsertListener(new TextAction(tc));
        tc.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke("F2"), "focusClasses");
        tc.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke("F3"), "focusShapes");
        tc.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke("F4"), "focusFind");
        tc.getActionMap().put("focusClasses", new SignChooser.FocusTopAction(INDEX_CLASSES));
        tc.getActionMap().put("focusShapes", new SignChooser.FocusTopAction(INDEX_SHAPES));
        tc.getActionMap().put("focusFind", new SignChooser.FocusTopAction(INDEX_FIND));
        back = tc;
    }
    
    public static void showSupport(JTextComponent tf){
        JFrame f = new JFrame("SignChooser");
        final SignChooser sg = new SignChooser();
        sg.addTextField(tf);
        f.getContentPane().add(sg);
        f.setSize(800,800);
        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        f.setLocation((screenSize.width-800)/2,(screenSize.height-800)/2);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        f.setVisible(true);
    }

    public static void main(String[] args){
        
        JFrame f = new JFrame("SignChooser");
        JPanel p = new JPanel(new GridLayout(1,2,5,0));
        final SignChooser sg = new SignChooser();
        final JTextField tf = new JTextField();
        HieroLabel l = new HieroLabel();
        l.setFontSize(40);
        sg.addTextField(tf);
        l.addTextField(tf);
        p.add(tf);
        p.add(l);
        f.getContentPane().add(sg);
        f.getContentPane().add(p, BorderLayout.NORTH);
        f.setSize(800,800);
        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        f.setLocation((screenSize.width-800)/2,(screenSize.height-800)/2);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        tf.getInputMap().put(KeyStroke.getKeyStroke("control S"), "save");
        tf.getActionMap().put("save", new AbstractAction("save"){
            public void actionPerformed(ActionEvent e){
                tf.selectAll();
                tf.copy();
            }
        });
        
        f.setVisible(true);
        tf.requestFocus();
    }
    
//****************************************************************************
//***************************  Property Support  *****************************
//****************************************************************************
    
    /** Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    

    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }    
    
    /** Getter for property selectedSign.
     * @return Value of property selectedSign.
     */
    public HieroglyphicSigns.Donne getSelectedSign() {
        return this.selectedSign;
    }    
    
    /** Setter for property selectedSign.
     * @param selectedSign New value of property selectedSign.
     */
    public void setSelectedSign(HieroglyphicSigns.Donne selectedSign) {
        HieroglyphicSigns.Donne oldSelectedSign = this.selectedSign;
        this.selectedSign = selectedSign;
        propertyChangeSupport.firePropertyChange("selectedSign", oldSelectedSign, selectedSign);
        
        if(selectedSign != null){
            signLabel.setText(selectedSign.entry);
            nameTf.setText(selectedSign.entry);
            phonTf.setText(selectedSign.phone);
            List codes = HieroglyphicSigns.getDefault().getCodes(selectedSign);
            Iterator iter = codes.iterator();
            StringBuffer s = new StringBuffer();
            while(iter.hasNext()){
                HieroglyphicSigns.Donne d = (HieroglyphicSigns.Donne)iter.next();
                s.append(d.entry).append(" ");
            }
            codesTf.setText(s.toString().trim());
        }else{
            signLabel.setText("");
            nameTf.setText("");
            phonTf.setText("");
            codesTf.setText("");
        }
    }
    
    /** Registers ActionListener to receive events.
     * @param listener The listener to register.
     */
    public synchronized void addInsertListener(java.awt.event.ActionListener listener) {
        if (listenerList == null ) {
            listenerList = new javax.swing.event.EventListenerList();
        }
        listenerList.add(java.awt.event.ActionListener.class, listener);
    }
    
    /** Removes ActionListener from the list of listeners.
     * @param listener The listener to remove.
     */
    public synchronized void removeInsertListener(java.awt.event.ActionListener listener) {
        listenerList.remove(java.awt.event.ActionListener.class, listener);
    }
    
    /** Notifies all registered listeners about the event.
     *
     * @param event The event to be fired
     */
    private void fireInsertListenerActionPerformed(java.awt.event.ActionEvent event) {
        if (listenerList == null) return;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==java.awt.event.ActionListener.class) {
                ((java.awt.event.ActionListener)listeners[i+1]).actionPerformed(event);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel findTab;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane selectionPane;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTabbedPane classesTab;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel signRendererPane;
    private javax.swing.JTextField findTf;
    private javax.swing.JList findList;
    private javax.swing.JTextField nameTf;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField phonTf;
    private javax.swing.JTextField codesTf;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTabbedPane formsTab;
    private javax.swing.JPanel signPane;
    // End of variables declaration//GEN-END:variables

    /** Holds value of property selectedSign. */
    private HieroglyphicSigns.Donne selectedSign;    
    
    /** Utility field used by bound properties. */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
    
    private HieroLabel signLabel;
    
    /** Utility field used by event firing mechanism. */
    private javax.swing.event.EventListenerList listenerList =  null;
    
    private FontMapper listFontMapper;
    private JComponent back;
    
}
