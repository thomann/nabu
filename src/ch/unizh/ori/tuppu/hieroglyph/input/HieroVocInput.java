/*
 * HieroVocInput.java
 *
 * Created on 27. Juli 2003, 18:01
 */

package ch.unizh.ori.tuppu.hieroglyph.input;

import ch.unizh.ori.tuppu.hieroglyph.*;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import java.io.*;

/**
 *
 * @author  pht
 */
public class HieroVocInput extends javax.swing.JFrame {
    
    /** Creates new form HieroVocInput */
    public HieroVocInput() {
        initComponents();
        hieroLabel = new HieroLabel();
        hieroPanel.add(hieroLabel);
        hieroLabel.addTextField(codageTf);
        SignChooser.showSupport(codageTf);
        
        toolBar.add(saveAction);
        toolBar.add(editAction);
        toolBar.add(enterAction);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        codageTf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        hieroPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        translitTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        traductTf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        vocTable = new javax.swing.JTable();
        toolBar = new javax.swing.JToolBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();

        setTitle("HieroVocInput");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jLabel1.setText("Codage:");
        jPanel1.add(jLabel1);

        codageTf.setColumns(15);
        jPanel1.add(codageTf);

        jLabel2.setText("Hiero:");
        jPanel1.add(jLabel2);

        hieroPanel.setLayout(new java.awt.BorderLayout());

        jPanel1.add(hieroPanel);

        jLabel3.setText("Translit.:");
        jPanel1.add(jLabel3);

        translitTf.setColumns(10);
        jPanel1.add(translitTf);

        jLabel4.setText("Traduction:");
        jPanel1.add(jLabel4);

        traductTf.setColumns(20);
        jPanel1.add(traductTf);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        vocTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codage", "Hiero", "Translit", "Traduction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vocTable);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        fileMenu.setText("File");
        menuBar.add(fileMenu);
        setJMenuBar(menuBar);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setSize(new java.awt.Dimension(892, 394));
        setLocation((screenSize.width-892)/2,(screenSize.height-394)/2);
    }//GEN-END:initComponents
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    private Action enterAction = new AbstractAction("Enter"){
        public void actionPerformed(ActionEvent e){
            VocItem vi = getEditVocItem();
            if(vi != null){
                vi.code = codageTf.getText();
                vi.translit = translitTf.getText();
                vi.traduct = traductTf.getText();
                if(editR == R_NEW){
                    addVocItem(vi);
                }else{
                    dirty = true;
                    getTableModel().fireTableRowsUpdated(editR,editR);
                }
                editR = R_NULL;
            }
            setEditVocItem(new VocItem());
            editR = R_NEW;
        }
    };
    
    private Action editAction = new AbstractAction("Edit"){
        public void actionPerformed(ActionEvent e){
            int r = vocTable.getSelectedRow();
            if(r<0) return;
            editR = r;
            setEditVocItem((VocItem)voc.get(r));
        }
    };
    
    private Action saveAction = new AbstractAction("Save"){
        public void actionPerformed(ActionEvent e){
            if(filename == null){
                JFileChooser fc = new JFileChooser();
                if(fc.showSaveDialog(null) != JFileChooser.APPROVE_OPTION){
                    return;
                }
                filename = fc.getSelectedFile();
            }
            PrintWriter out = null;
            try{
                out = new PrintWriter(new FileWriter(filename));
                Iterator iter = voc.iterator();
                while(iter.hasNext()){
                    VocItem vi = (VocItem)iter.next();
                    out.println(vi);
                }
                dirty = true;
            }catch(IOException ex){
                ex.printStackTrace();
            }finally{
                out.close();
            }
        }
    };
    
    public void open(File filename){
        voc = new ArrayList();
        BufferedReader in = null;
        try{
            in = new BufferedReader(new FileReader(filename));
            String line;
            while( (line=in.readLine()) != null){
                voc.add(new VocItem(line));
            }
            this.filename = filename;
            dirty = false;
        }catch(IOException ex){
            ex.printStackTrace();
        }finally{
            try{
                in.close();
            }catch(IOException ex){}
        }
        vocTable.setModel(new MyTableModel());
        getTableModel().fireTableRowsUpdated(0,voc.size()-1);
    }
    
    public void addVocItem(VocItem vi){
        voc.add(vi);
        getTableModel().fireTableRowsInserted(voc.size()-1, voc.size()-1);
        dirty = true;
    }
    
    public MyTableModel getTableModel(){
        return (MyTableModel)vocTable.getModel();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        HieroVocInput hv = new HieroVocInput();
        hv.setVisible(true);
        hv.open(new File(args[0]));
    }
    
    /** Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    
    
    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }
    
    /** Getter for property editVocItem.
     * @return Value of property editVocItem.
     */
    public VocItem getEditVocItem() {
        return this.editVocItem;
    }
    
    /** Setter for property editVocItem.
     * @param editVocItem New value of property editVocItem.
     */
    public void setEditVocItem(VocItem editVocItem) {
        VocItem oldEditVocItem = this.editVocItem;
        this.editVocItem = editVocItem;
        propertyChangeSupport.firePropertyChange("editVocItem", oldEditVocItem, editVocItem);
        
        if(editVocItem != null){
            codageTf.setText(editVocItem.code);
            translitTf.setText(editVocItem.translit);
            traductTf.setText(editVocItem.traduct);
            
            codageTf.selectAll();
            codageTf.requestFocus();
        }else{
            codageTf.setText("");
            translitTf.setText("");
            traductTf.setText("");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel hieroPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField translitTf;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JTextField codageTf;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTable vocTable;
    private javax.swing.JTextField traductTf;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /** Holds value of property editVocItem. */
    private VocItem editVocItem;    
    
    /** Utility field used by bound properties. */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);

    private List voc;
    
    private File filename = null;
    
    private HieroLabel hieroLabel;
    
    private boolean dirty = false;
    private int editR = R_NULL;
    public static final int R_NEW = -1;
    public static final int R_NULL = -2;
    
    public class VocItem{
        public String code;
        public String translit;
        public String traduct;
        public VocItem(){
        }
        public VocItem(String code, String translit, String traduct){
            this.code = code;
            this.translit = translit;
            this.traduct = traduct;
        }
        public VocItem(String line){
            String[] s = line.split("\\t");
            code = s[0];
            translit = s[1];
            traduct = s[2];
        }
        public String toString(){
            return code +"\t"+ translit +"\t"+ traduct;
        }
    }
    
    public class MyTableModel extends AbstractTableModel{
        
        public int getColumnCount() {
            return 4;
        }
        
        public int getRowCount() {
            return voc.size();
        }
        
        public Object getValueAt(int r, int c) {
            VocItem vi = (VocItem)voc.get(r);
            switch(c){
                case 0:
                    return vi.code;
                case 1:
                    return vi.code;
                case 2:
                    return vi.translit;
                case 3:
                    return vi.traduct;
            }
            return null;
        }
        
    }
    
}
